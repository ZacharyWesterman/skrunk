type Config {
	name: String!
	value: String
}

type ConfigList {
	configs: [Config!]!
}

type Theme {
	name: String!
	colors: [String!]!
	text: [String!]!
	special: [String!]!
	border: String!
}

input _Theme {
	name: String!
	colors: [String!]!
	text: [String!]!
	special: [String!]!
	border: String!
}

type SchemaParam {
	name: String!
	type: String!
	optional: Boolean!
}

type SchemaReturnType {
	type: String!
	optional: Boolean!
	array: Boolean!
}

type SchemaType {
	type: String!
	union: Boolean!
	subtypes: [String!]!
	params: [SchemaParam!]!
}

type SchemaQuery {
	name: String!
	params: [SchemaParam!]!
	query: String!
	returns: SchemaReturnType!
}

type Schema {
	mutations: [SchemaQuery!]!
	queries: [SchemaQuery!]!
	types: [SchemaType!]!
}

union ConfigsResponse = ConfigList | InsufficientPerms
union ThemeEditResponse = Theme | MissingConfig | InsufficientPerms

#Resolvers below this line

extend type Query {
	getEnabledModules: [String!]!
	getModules: [String!]!
	getServerEnabledModules(group: String): [String!]!
	getUserGroups: [String!]!
	getConfigs: ConfigsResponse
	getConfig(name: String!): String
	getThemes: [Theme!]!
	getSchema: Schema!
}

extend type Mutation {
	setModuleEnabled(module_id: String!, enabled: Boolean!, group: String): [String!]!
	setConfig(name: String!, value: String): Boolean!
	createTheme(theme: _Theme!): ThemeEditResponse!
	deleteTheme(name: String!): ThemeEditResponse!
}
