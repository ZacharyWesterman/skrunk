type Book {
	id: String!
	title: String!
	subtitle: String
	authors: [String!]!
	publisher: String!
	publishedDate: Date!
	has_description: Boolean!
	industryIdentifiers: [BookIdent!]!
	pageCount: Int!
	categories: [String!]!
	maturityRating: String!
	language: String!
	thumbnail: String
	smallThumbnail: String
	creator: String!
	owner: UserMinData!
	shared: Boolean!
	shareHistory: [BookShare!]!
	rfid: String!
	ownerHistory: [BookOwnerHist!]!
	ebooks: [EBook!]!
	audiobook: String
}

type BookTag {
	rfid: String!
	bookId: String!
	creator: String!
}

"""An industry identifier for a book, such as ISBN."""
type BookIdent {
	"""The type of identifier, e.g., ISBN_10, ISBN_13."""
	type: String!
	"""The identifier value."""
	identifier: String!
}

"""A list of books."""
type BookList {
	"""The list of books."""
	books: [Book!]!
}

"""Error thrown when a Google Books API request fails."""
type ApiFailedError {
	"""Error message from the API."""
	message: String!
}

"""Error thrown when trying to tag a book that already exists."""
type BookTagExistsError {
	"""Message indicating that the book tag already exists."""
	message: String!
}

"""Error thrown when a book does not exist."""
type BookTagDoesNotExistError {
	"""Message indicating that the book tag does not exist."""
	message: String!
}

"""Error thrown when a book cannot be shared."""
type BookCannotBeShared {
	"""Message indicating that the book cannot be shared."""
	message: String!
}

type BookShare {
	user_id: String
	name: String!
	display_name: String!
	start: DateTime!
	stop: DateTime
}

type BookOwnerHist {
	user_id: String!
	name: String!
	display_name: String!
	start: DateTime!
	stop: DateTime!
}

type UserBookCount {
	owner: UserMinData!
	count: Int!
}

type EBook {
	url: String!
	fileType: String!
}

input BookSearchFilter {
	owner: String
	title: String
	author: String
	genre: String
	shared: Boolean
}

input BookEditData {
	title: String!
	subtitle: String
	authors: [String!]!
}

input BookCreateData {
	title: String!
	subtitle: String
	authors: [String!]!
	description: String
	pageCount: Int!
	isbn: String!
	publisher: String!
	publishedDate: Date!
	rfid: String!
	thumbnail: String
}

union BookQueryResponse = BookList | ApiFailedError
union BookTagCreateResponse = BookTag | BookTagExistsError | ApiFailedError | InsufficientPerms | UserDoesNotExistError
union BookResponse = Book | BookTagDoesNotExistError
union BookTagDeleteResponse = BookTag | BookTagDoesNotExistError | InsufficientPerms
union BookTagUpdateResponse = Book | BookTagDoesNotExistError | InsufficientPerms
union BookTagShareResponse = Book | BookTagDoesNotExistError | BookCannotBeShared | UserDoesNotExistError | InsufficientPerms
union BookEditResponse = Book | BookTagDoesNotExistError | UserDoesNotExistError | InsufficientPerms

#Resolvers below this line:

extend type Query {
	getBooks(filter: BookSearchFilter!, start: Int!, count: Int!, sorting: Sorting!): [Book!]!
	countBooks(filter: BookSearchFilter!): Int!
	searchBooks(title: String!, author: String!): BookQueryResponse!
	getBookByTag(rfid: String!): BookResponse!
	countAllUserBooks: [UserBookCount!]!
	getBookDescription(id: String!): String
}

extend type Mutation {
	linkBookTag(owner: String!, rfid: String!, bookId: String!): BookTagCreateResponse!
	unlinkBookTag(rfid: String!): BookTagDeleteResponse!
	borrowBook(id: String!): BookTagShareResponse!
	requestToBorrowBook(id: String!): NotificationResponse!
	shareBook(id: String!, username: String!): BookTagShareResponse!
	shareBookNonUser(id: String!, name: String!): BookTagShareResponse!
	returnBook(id: String!): BookTagShareResponse!
	setBookOwner(id: String!, username: String!): BookEditResponse!
	editBook(id: String!, changes: BookEditData!): BookEditResponse!
	createBook(owner: String!, data: BookCreateData!): BookTagCreateResponse!

	appendEBook(id: String!, url: String!): BookEditResponse!
}
