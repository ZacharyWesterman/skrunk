type Blob {
	id: String!
	created: DateTime!
	creator: String!
	name: String!
	ext: String!
	mimetype: String!
	size: Long!
	tags: [String!]!
	preview: String
	thumbnail: String
	hidden: Boolean!
	ephemeral: Boolean!
	references: Int!
}

type BlobDoesNotExistError {
	message: String!
}

type BadTagQuery {
	message: String!
}

type InsufficentDiskSpace {
	message: String!
}

type BlobList {
	blobs: [Blob!]!
}

type BlobCount {
	count: Long!
}

type QRParseResponse {
	data: String
	error: String
}

type ZipProgress {
	progress: Float!
	item: String!
}

input BlobSearchFilter {
	creator: String
	begin_date: DateTime
	end_date: DateTime
	name: String
	tag_expr: String
	ephemeral: Boolean
}

union BlobCountResponse = BlobCount | BadTagQuery | InsufficientPerms
union BlobQueryResponse = BlobList | BadTagQuery | InsufficientPerms
union BlobUpdateResponse = Blob | BlobDoesNotExistError | InsufficientPerms
union BlobZipResponse = Blob | BadTagQuery | UserDoesNotExistError | InsufficientPerms | BlobDoesNotExistError
union BlobCreateResponse = Blob | InsufficientPerms
union ZipProgressResponse = ZipProgress | BlobDoesNotExistError | InsufficentDiskSpace | InsufficientPerms

#Resolvers below this line:

extend type Query {
	getBlobs(filter: BlobSearchFilter!, start: Int!, count: Int!, sorting: Sorting!): BlobQueryResponse!
	countBlobs(filter: BlobSearchFilter!): BlobCountResponse!
	getBlob(id: String!): Blob
	totalBlobSize(filter: BlobSearchFilter!): BlobCountResponse!
	getQRFromBlob(id: String!): QRParseResponse!
	countTagUses(tag: String!): Int!
	generateUID: String!
	pollZipProgress(uid: String!): ZipProgressResponse!
}

extend type Mutation {
	deleteBlob(id: String!): BlobUpdateResponse!
	setBlobTags(id: String!, tags: [String!]!): BlobUpdateResponse!
	createZipArchive(filter: BlobSearchFilter!, uid: String!): BlobZipResponse!
	getBlobFromQR(text: String, amount: Int!): BlobCreateResponse!
	setBlobHidden(id: String!, hidden: Boolean!): BlobUpdateResponse!
	setBlobEphemeral(id: String!, ephemeral: Boolean!): BlobUpdateResponse!
	cancelZipArchive(uid: String!): ZipProgressResponse!
}
