type WeatherUser {
	username: String!
	lat: Float!
	lon: Float!
	max: WeatherTemp_!
	min: WeatherTemp_!
	last_sent: DateTime
	exclude: Boolean!
}

input WeatherUserInput {
	username: String!
	lat: Float!
	lon: Float!
	max: WeatherTemp!
	min: WeatherTemp!
}

type WeatherExecution {
	timestamp: DateTime!
	users: [String!]!
	error: String
}

input WeatherTemp {
	default: Boolean!
	disable: Boolean!
	value: Float!
}

type WeatherTemp_ {
	default: Boolean!
	disable: Boolean!
	value: Float!
}

type WeatherAlert {
	recipient: String!
	message: String!
	sent: DateTime!
}

type LogResult {
	result: Boolean!
}

union WeatherUserResponse = WeatherUser | UserDoesNotExistError | InsufficientPerms
union WeatherUserCreateResponse = WeatherUser | UserExistsError | UserDoesNotExistError | InsufficientPerms
union WeatherUserDeleteResponse = WeatherUser | UserDoesNotExistError | InsufficientPerms
union WeatherUserUpdateResponse = WeatherUser | UserDoesNotExistError | InsufficientPerms
union LogResponse = LogResult | InsufficientPerms

#Resolvers below this line:

extend type Query {
	getWeatherUser: WeatherUserResponse!
	getWeatherUsers: [WeatherUser!]!
	getLastWeatherExec: WeatherExecution
	weatherAlertHistory(start: Int!, count: Int!): [WeatherAlert!]!
	getWeatherAlerts(username: String!, start: Int!, count: Int!): [WeatherAlert!]!
	countWeatherAlerts(username: String!): Int!
}

extend type Mutation {
	createWeatherUser(userdata: WeatherUserInput!): WeatherUserCreateResponse!
	deleteWeatherUser(username: String!): WeatherUserDeleteResponse!
	enableWeatherUser(username: String!): WeatherUserUpdateResponse!
	disableWeatherUser(username: String!): WeatherUserUpdateResponse!
	updateWeatherUser(userdata: WeatherUserInput!): WeatherUserUpdateResponse!
	logWeatherAlert(users: [String!]!, error: String): LogResponse!
	logUserWeatherAlert(username: String!, message: String!): LogResponse!
}
